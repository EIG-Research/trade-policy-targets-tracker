line = list(color = eig_colors[1], width = 2, dash = "dash")
)
),
# label for balance
annotations = list(
list(
xref = "paper",
x = 0,
y = y_lvl+0.6,
text = paste0("2000 level, before China joined the WTO = ",round(y_lvl,1),"M"),
showarrow = FALSE,
font = list(color = eig_colors[2], size = 12),
xanchor = "left",
yanchor = "middle"
)
)
)
emp_lvl_df = tibble(
quarter = as.Date(as.yearqtr(time(emp_lvl_prime_age_m))),
employment_lvl = as.numeric(emp_lvl_prime_age_m),
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
emp_lvl_df_trend <- emp_lvl_df %>%
filter(quarter >= as.Date("2010-01-01"),
quarter <= as.Date("2020-01-01"))
trend_model <- lm(employment_lvl ~ as.numeric(quarter), data = emp_lvl_df_trend)
emp_lvl_df_trend <- emp_lvl_df %>% filter(quarter >= as.Date("2010-01-01")) %>%
mutate(trend = predict(trend_model, newdata = data.frame(quarter = as.numeric(quarter))))
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(emp_lvl_df$quarter)
start_year <- lubridate::year(date_range[1])
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5,
lubridate::year(date_range[2]) %/% 5*5,
by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
y_lvl = emp_lvl_df %>% mutate(year = lubridate::year(quarter)) %>%
filter(year == 2000) %>% summarise(mean(employment_lvl))
y_lvl = as.numeric(y_lvl[1,1])
plot_ly(
data = emp_lvl_df,
x = ~quarter,
y = ~employment_lvl,
type = 'scatter',
mode = 'lines',
name = "Employment Levels, Native-born Americans Age 16 to 64",
line = list(color = eig_colors[1], width = 2),
text = ~hover_label,
hovertemplate = "%{x}: %{y:,.1f}M<extra></extra>"
) %>%
add_lines(
data = emp_lvl_df_trend,
x = ~quarter,
y = ~trend,
name = "Trendline between the Great Financial Crisis and COVID-19",
line = list(color = eig_colors[2], width = 2, dash = "dash"),
hoverinfo = "skip",
hovertemplate = "<extra></extra>"
) %>%
layout(
xaxis = list(title = "Time (Quarterly)",
tickvals = tick_dates,
ticktext = tick_texts,
hoverformat = "%Y Q%q",
range = c(tick_dates[1], tick_dates[length(tick_dates)])),
yaxis = list(title = "Employment (Millions of Workers)",
tickformat = ".0f",
ticksuffix = ""),
legend = list(
x = 0,          # 0 = left side
y = 1,          # 1 = top side
xanchor = "left",
yanchor = "top",
title = list(text = ""),
bgcolor = 'rgba(255,255,255,0.5)',  # optional: semi-transparent white background
bordercolor = "black",              # optional: border color
borderwidth = 1
),
hovermode = "closest",
hoverlabel = list(bgcolor = eig_colors[1]),
# add horizontal line
shapes = list(
list(
type = "line",
xref = "paper",
x0 = 0, x1 = 1,
y0 = y_lvl, y1 = y_lvl,
line = list(color = eig_colors[1], width = 2, dash = "dash")
)
),
# label for balance
annotations = list(
list(
xref = "paper",
x = 0,
y = y_lvl+0.6,
text = paste0("2000 level, before China joined the WTO = ",round(y_lvl,1),"M"),
showarrow = FALSE,
font = list(color = eig_colors[2], size = 12),
xanchor = "left",
yanchor = "middle"
)
)
)
runApp('plotly app experiment.R')
runApp('plotly app experiment.R')
runApp('plotly app experiment.R')
runApp('plotly app experiment.R')
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(inflation_df$quarter)
## Inflation ##
# convert inflation timeseries to dataframe
inflation_df <- tibble(
quarter = as.Date(as.yearqtr(time(cpi_inflation))),
inflation = as.numeric(cpi_inflation)*100,
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(inflation_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
date_range
start_year
end_year
tick_years <- seq(start_year, end_year, by = 5)
tick_years
seq((start_year %/% 5 + 1)*5
seq((start_year %/% 5 + 1)
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(inflation_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_years
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_dates
tick_texts <- as.character(as.yearqtr(tick_dates))
plot_ly(
data = inflation_df,
x = ~quarter,
y = ~inflation,
type = 'scatter',
mode = 'lines',
line = list(color = eig_colors[1], width = 2),
text = ~hover_label,
hovertemplate = "%{x}: %{y:.1f}%<extra></extra>"
) %>%
layout(
xaxis = list(title = "Time (Quarterly)",
tickvals = tick_dates,
ticktext = tick_texts,
hoverformat = "%Y Q%q",
range = c(tick_dates[1], tick_dates[length(tick_dates)])),
yaxis = list(title = "Inflation rate (%)",
tickformat = ".0f",
ticksuffix = "%",
rangemode = "tozero"),
hovermode = "closest",
hoverlabel = list(bgcolor = eig_colors[1]),
# add horizontal line
shapes = list(
list(
type = "line",
xref = "paper",
x0 = 0, x1 = 1,
y0 = 2, y1 = 2,
line = list(color = eig_colors[1], width = 2, dash = "dash")
)
),
# label for the 2%
annotations = list(
list(
xref = "paper",
x = 0,
y = 1.75,
text = "Long-run Fed target (2%)",
showarrow = FALSE,
font = list(color = eig_colors[2], size = 12),
xanchor = "left",
yanchor = "middle"
)
)
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(budget_df$quarter)
start_year <- lubridate::year(date_range[1])
## Budget ##
budget_df <- tibble(
quarter = as.Date(as.yearqtr(time(budget_real))),
budget = as.numeric(budget_real),
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(budget_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
date_range
start_year
end_year
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
tick_texts
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(trade_df$quarter)
start_year <- lubridate::year(date_range[1])
## Trade ##
trade_agg_df <- tibble(
quarter = as.Date(as.yearqtr(time(trade_agg_qt))),
Total = as.numeric(trade_agg_qt)
)
trade_china_df <- tibble(
quarter = as.Date(as.yearqtr(time(trade_china_qt))),
China = as.numeric(trade_china_qt)
)
trade_df <- left_join(trade_agg_df, trade_china_df, by = "quarter") %>%
pivot_longer(cols = c(Total, China),
names_to = "type",
values_to = "deficit") %>%
mutate(hover_label = format(as.yearqtr(quarter), "%Y Q%q"))
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(trade_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
date_range
start_year
date_range
start_year
end_year
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
tick_texts
## Construction Spending ##
const_df <- tibble(
quarter = as.Date(time(construction_real)),
const_spending = as.numeric(construction_real),
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(const_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
date_range
start_year
end_year
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
tick_texts
emp_lvl_df = tibble(
quarter = as.Date(as.yearqtr(time(emp_lvl_prime_age_m))),
employment_lvl = as.numeric(emp_lvl_prime_age_m),
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
fit_emp_lvl_df = emp_lvl_df %>%
filter(quarter >= as.Date("2010-01-01") & quarter <= as.Date("2020-01-01")) %>%
mutate(time_index = as.numeric(quarter))
fit_model <- lm(employment_lvl ~ time_index, data = fit_emp_lvl_df)
fitted_line <- emp_lvl_df %>%
filter(quarter >= as.Date("2010-01-01")) %>%
mutate(time_index = as.numeric(quarter)) %>%
mutate(fitted_lvl = predict(fit_model, newdata = .))
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(emp_lvl_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
date_range
start_year
end_year
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_years
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_dates
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 2)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
tick_texts
## Employment rate, native born men 18+ ##
emp_pop_ratio_df = tibble(
quarter = as.Date(as.yearqtr(time(emp_pop_ratio_m))),
emp_pop = as.numeric(emp_pop_ratio_m)*100,
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(emp_pop_ratio_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
date_range
start_year
end_year
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 2)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
tick_texts
## Employment Manufacturing ##
manu_df = tibble(
quarter = as.Date(as.yearqtr(time(manu_qt))),
manufacturing = as.numeric(manu_qt),
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(manu_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 2)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
# Add ticks
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
tick_texts
manu_share_df = tibble(
quarter = as.Date(as.yearqtr(time(manu_share))),
manufacturing_share = as.numeric(manu_share) *100,
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(manu_share_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_years
tick_dates
tick_texts
motor_df = tibble(
quarter = as.Date(as.yearqtr(time(motor_qt))),
motor_level = as.numeric(motor_qt) *100,
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(motor_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_dates
tick_texts
motor_share_df = tibble(
quarter = as.Date(as.yearqtr(time(motor_share))),
motor_share = as.numeric(motor_share) *100,
hover_label = format(as.yearqtr(quarter), "%Y Q%q")
)
# Dynamically generate tick dates: Q1 every 5 years
date_range <- range(motor_share_df$quarter)
start_year <- lubridate::year(date_range[1])
end_year   <- lubridate::year(date_range[2])
tick_years <- c(start_year,
seq((start_year %/% 5 + 1)*5, end_year %/% 5*5, by = 5))
tick_dates <- c(as.Date(paste0(tick_years, "-01-01")),
tail(date_range, 1)) %>% unique()  # Q1 of each year
tick_texts <- as.character(as.yearqtr(tick_dates))
tick_dates
tick_texts
runApp('plotly app experiment.R')
## Employment in manufacturing, counties most affected by the "China shock"  ##
china_shock_df <- tibble(year = time(china_shock_yr),
cs_manu_emp = as.numeric(china_shock_yr),
hover_label = as.character(year))
# Dynamically generate tick dates: Q1 every 5 years
start_year <- china_shock_df$year[1]
end_year   <- china_shock_df$year[nrow(china_shock_df)]
start_year
end_year
tick_years <- seq(start_year, end_year, by = 5)
tick_years
tick_years <- c(seq(start_year, end_year, by = 5), end_year)
tick_texts <- as.character(tick_years)
tick_texts
runApp('plotly app experiment.R')
shiny::runApp()
rsconnect::setAccountInfo(name='economicinnovationgroup',
token='1E424A49864E72123BE5CAA19E6D2274',
secret='/OJ/Oy/GW2sk6ibHJt4JgoqzB80U03mcEyFJn0ev')
deployApp("/Users/jiaxinhe/Documents/projects/trade-policy-targets-tracker/trade-target-tracker")
deployApp("/Users/jiaxinhe/Documents/projects/trade-policy-targets-tracker/trade-target-tracker")
# remove dependencies
rm(list = ls())
###########################
###   Load Packages     ###
###########################
library(tidyr)
library(dplyr)
library(tidycensus)
library(scales)
path_project <- "/Users/jiaxinhe/Documents/projects/china-shock"
path_data <- file.path(path_project, "data")
# SIC to NAICS crosswalk from Eckert, Fort, Schott, and Yang (2021)
sic_naics_crosswalk <- read.csv(file.path(path_data, "full_sic87_naics97.csv")) %>%
filter(str_detect(naics97, "^3361") |
str_detect(naics97, "^3362") |
str_detect(naics97, "^3363")) %>% mutate(sic87 = sic87) %>%
select(sic87, naics97, weight_emp) %>% na.omit()
library(stringr)
# SIC to NAICS crosswalk from Eckert, Fort, Schott, and Yang (2021)
sic_naics_crosswalk <- read.csv(file.path(path_data, "full_sic87_naics97.csv")) %>%
filter(str_detect(naics97, "^3361") |
str_detect(naics97, "^3362") |
str_detect(naics97, "^3363")) %>% mutate(sic87 = sic87) %>%
select(sic87, naics97, weight_emp) %>% na.omit()
View(sic_naics_crosswalk)
# SIC to NAICS crosswalk from Eckert, Fort, Schott, and Yang (2021)
sic_naics_crosswalk <- read.csv(file.path(path_data, "full_sic87_naics97.csv")) %>%
filter(naics97 == "3361//" |
naics97 == "3362//" |
naics97 == "3363//") %>% mutate(sic87 = sic87) %>%
select(sic87, naics97, weight_emp) %>% na.omit()
View(sic_naics_crosswalk)
# SIC to NAICS crosswalk from Eckert, Fort, Schott, and Yang (2021)
sic_naics_crosswalk <- read.csv(file.path(path_data, "full_sic87_naics97.csv")) %>%
filter(naics97 == "3361//" |
naics97 == "3362//" |
naics97 == "3363//") %>% mutate(sic = sic87) %>% filter(weight_emp > 0) %>%
select(sic, naics97, weight_emp) %>% na.omit()
for(year in 90:97){
emp_var <- paste0("man_emp_", as.character(year))
cbp_year <- read.table(file.path(path_data, paste0("cbp", as.character(year), "co.txt")),
header=TRUE, sep = ',')
cbp_year <- cbp_year %>% filter(sic %in% sic_naics_crosswalk$sic) %>%
left_join(sic_naics_crosswalk, by = "sic") %>%
mutate(emp = floor(as.numeric(emp)*weight_emp),
county = fipstate * 1000 + fipscty) %>%
group_by(county) %>% summarise(!!emp_var := sum(emp))
china_most_hit <- china_most_hit %>% left_join(cbp_year, by = "county")
}
year <- 90
emp_var <- paste0("man_emp_", as.character(year))
cbp_year <- read.table(file.path(path_data, paste0("cbp", as.character(year), "co.txt")),
header=TRUE, sep = ',')
cbp_year %>% filter(sic %in% sic_naics_crosswalk$sic) %>%
left_join(sic_naics_crosswalk, by = "sic")
View(cbp_year)
cbp_year <- cbp_year %>% filter(sic %in% sic_naics_crosswalk$sic) %>%
left_join(sic_naics_crosswalk, by = "sic")
View(cbp_year)
# SIC to NAICS crosswalk from Eckert, Fort, Schott, and Yang (2021)
sic_naics_crosswalk <- read.csv(file.path(path_data, "full_sic87_naics97.csv")) %>%
filter(naics97 == "3361//" |
naics97 == "3362//" |
naics97 == "3363//") %>% mutate(sic = sic87) %>% filter(weight_emp > 0) %>%
select(sic, naics97, weight_emp) %>% na.omit() %>% group_by(sic) %>%
summarise(weight_emp = sum(weight_emp))
year <- 90
emp_var <- paste0("man_emp_", as.character(year))
cbp_year <- read.table(file.path(path_data, paste0("cbp", as.character(year), "co.txt")),
header=TRUE, sep = ',')
cbp_year <- cbp_year %>% filter(sic %in% sic_naics_crosswalk$sic) %>%
left_join(sic_naics_crosswalk, by = "sic")
for(year in 90:97){
emp_var <- paste0("man_emp_", as.character(year))
cbp_year <- read.table(file.path(path_data, paste0("cbp", as.character(year), "co.txt")),
header=TRUE, sep = ',')
cbp_year <- cbp_year %>% filter(sic %in% sic_naics_crosswalk$sic) %>%
left_join(sic_naics_crosswalk, by = "sic") %>%
mutate(emp = floor(as.numeric(emp)*weight_emp),
county = fipstate * 1000 + fipscty) %>%
group_by(county) %>% summarise(!!emp_var := sum(emp))
china_most_hit <- china_most_hit %>% left_join(cbp_year, by = "county")
}
